%%%%
% ME 601 Quadcopter Simulation
%
%%%%

% clear workspace and add required paths
clear; close all; clc
addpath('utils')

% *************** REFERENCE TRAJECTORY & TRACKING CONTROLLER ************
% ============ Your code goes here ============================
% =============================================================
% Your trajectory data should be stored in a csv file that is
%     generated by trajectory_generator.m
% A default csv file is given as traj.csv
trajfile = 'traj2d.csv';

% Your tracking controller should be set to controller function handle
% A default tracking controller is given as PID_controller.m
% Your controller should have the same inputs and outputs as
%     the given PID_controller.m
%controlhandle = @PID_controller;
controlhandle = @lqr_controller2d;

% =============================================================
% ============ Your code ends here ============================

% Plot entire trajectory initially
plot_traj2d(trajfile);

% Pause before simulation
disp("Press ENTER to begin the simulation...")
pause

% real-time: if set to true, the program will slow execution to
% match real time.
real_time = true;


% Load trajectory csv
global M
M = readmatrix(trajfile); % load in trajectory matrix
trajhandle = @trajectory2d_readonly;
% final time
[~,t_f] = trajhandle(0); % Obtain the domain [0,t_f] of the trajectory

% parameters for simulation are chosen from the crazyflie quadcopter
params.L = 2; %2m length vehicle


%% **************************** INITIAL FIGURES**************************
fprintf('Initializing figures...\n')
h_fig = figure(1);
h_3d = gca;
axis equal

xlabel('x [m]'); 
ylabel('y [m]');

set(gcf,'Renderer','OpenGL')

%% *********************** INITIAL CONDITIONS ***********************
fprintf('Setting initial conditions...\n')
max_iter  = 5000;      % max iteration
starttime = 0;         % start of simulation in seconds
tstep     = 0.01;      % this determines the time step at which the solution is given
cstep     = 0.05;      % image capture time interval
nstep     = cstep/tstep;
time      = starttime; % current time
err = []; % runtime errors

% Get start and stop position
des_start = trajhandle(0);
des_stop  = trajhandle(t_f);
stop  = des_stop.y;  % this is the goal state
x0   = des_start.y;
xtraj = zeros(max_iter*nstep, length(x0));
ttraj = zeros(max_iter*nstep, 1);


x   = x0;        % state

pos_tol   = 0.01;
theta_tol   = 0.01;

%% ************************* RUN SIMULATION *************************
fprintf('Simulation Running....')
% Main loop
figure(1);
hold on;
desired_x = [];
desired_y = [];
for iter = 1:max_iter

    timeint = time:tstep:time+cstep; % The time interval for ode45 to simulate

    tic;

    % Run simulation
    true_controllerhandle = @controller2d_readonly;
    [tsave, xsave] = ode45(@(t,s) bicycleEOM(t, s, true_controllerhandle, trajhandle, params, controlhandle), timeint, x);
    x    = xsave(end, :)';

    % Save to traj
    xtraj((iter-1)*nstep+1:iter*nstep,:) = xsave(1:end-1,:);
    ttraj((iter-1)*nstep+1:iter*nstep) = tsave(1:end-1);
  
    % Update quad plot
    desired_state = trajhandle(time + cstep);
    desired_x = [desired_x, desired_state.y(1)];
    desired_y = [desired_y, desired_state.y(2)];
    % QP{qn}.UpdateQuadPlot(x{qn}, [desired_state.y(1:3); desired_state.y(1:3)], time + cstep);
    % set(h_title, 'String', sprintf('iteration: %d, time: %4.2f', iter, time + cstep))
   
     plot(desired_x, desired_y, 'b');
    hold on;
    plot(xsave(:,1), xsave(:,2), 'r'); % plotting in red color

    
    time = time + cstep; % Update simulation time
    t = toc;
    % Check to make sure ode45 is not timing out
    if(t> cstep*50)
        err = 'Ode45 Unstable';
        break;
    end

    % Pause to make real-time
    if real_time && (t < cstep)
        pause(cstep - t);
    end

    % Check termination criteria
    if terminate_check2d(x, time, stop, pos_tol, theta_tol, t_f)
        break
    end
end

%% ************************* POST PROCESSING *************************
% Truncate xtraj and ttraj

xtraj = xtraj(1:iter*nstep,:);
ttraj = ttraj(1:iter*nstep);

% 
% % Legend on Figure 1
% figure(1)
% % legend('Trajectory','Quad','$\mathbf{r}(t)$','Interpreter','Latex','location','best');
% legend('Reference traj','Quad traj','$\mathbf{r}(t)$','Interpreter','Latex','location','best');
% 
% % Plot the saved position and velocity of each robot
% for qn = 1:nquad
%     % Truncate saved variables
%     QP{qn}.TruncateHist();
%     % Plot position for each quad
%     h_pos{qn} = figure('Name', ['Quad ' num2str(qn) ' : position']);
%     plot_state(h_pos{qn}, QP{qn}.state_hist(1:3,:), QP{qn}.time_hist, 'pos', 'vic');
%     plot_state(h_pos{qn}, QP{qn}.state_des_hist(1:3,:), QP{qn}.time_hist, 'pos', 'des');
%     legend('Quad','Traj')
%     % Plot velocity for each quad
%     h_vel{qn} = figure('Name', ['Quad ' num2str(qn) ' : velocity']);
%     plot_state(h_vel{qn}, QP{qn}.state_hist(4:6,:), QP{qn}.time_hist, 'vel', 'vic');
%     plot_state(h_vel{qn}, QP{qn}.state_des_hist(4:6,:), QP{qn}.time_hist, 'vel', 'des');
%     legend('Quad','Traj')
% end
% if(~isempty(err))
%     error(err);
% end

%% **************** MEAN SQUARED ERROR (MSE) ***************
posmse = 0; % MSE of position
thetamse = 0; % MSE of linear velocity 
ndata = size(M,1) ; % number of data

posreal = xtraj(:,1:2); % real quad (x,y) position
posref = M(1:ndata-1, 2:3); % reference quad (x,y) position 
posmse = immse(posreal, posref);

thetareal = xtraj(:,3); % real quad heading angle theta
thetaref = M(1:ndata-1, 4); % reference quad (dot x,dot y) velocity
thetamse = immse(thetareal, thetaref);

fprintf('The position mean squared error is %f \n', posmse);
fprintf('The heading angle mean squared error is %f', thetamse);
